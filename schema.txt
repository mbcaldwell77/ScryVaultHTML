-- Create the table to store your book collection
CREATE TABLE books (
  id TEXT PRIMARY KEY, -- Using the ISBN or OpenLibrary ID as the primary key
  title TEXT NOT NULL,
  authors TEXT,
  publish_date TEXT,
  cover_url TEXT,
  market_price REAL, -- Using REAL for floating point numbers
  date_added TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Enable Row Level Security (RLS) on the new table
-- This is a crucial security step.
ALTER TABLE books ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows users to see and manage their own books.
-- This policy allows any user (including the 'anon' public user) to perform all actions.
-- This is suitable for a personal, single-user application.
CREATE POLICY "Public user can manage all books"
  ON books
  FOR ALL
  USING (true)
  WITH CHECK (true);

-- Create the new table for individual inventory copies
CREATE TABLE inventory (
  copy_id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- A unique ID for each specific copy
  book_isbn TEXT NOT NULL REFERENCES books(id) ON DELETE CASCADE, -- Links to the books table
  condition TEXT,
  purchase_price REAL,
  notes TEXT,
  date_added TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Enable Row Level Security (RLS) on the new table
ALTER TABLE inventory ENABLE ROW LEVEL SECURITY;

-- Create a policy that allows public users to manage all inventory items
CREATE POLICY "Public user can manage all inventory"
  ON inventory
  FOR ALL
  USING (true)
  WITH CHECK (true);

-- Optional: If you want to remove the price and date from the original 'books' table 
-- as it's now handled by the 'inventory' table, you can run these lines too.
-- ALTER TABLE books DROP COLUMN IF EXISTS market_price;
-- ALTER TABLE books DROP COLUMN IF EXISTS date_added;
